#version 450
#include "sh.inc"

layout(binding = 0) buffer SHCoef {
   uvec3 values[];
};
layout(binding = 1, rgba8) uniform imageCube skyCube;

layout(push_constant) uniform ComputeSHConsts {
	uvec3 sizeAndLevel;
} shConsts;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

vec3 GetDirVec(uvec2 pixelPos, uint face) {
    vec2 xy = vec2(pixelPos.xy) / shConsts.sizeAndLevel.xy;
    xy = xy * 2 - 1;
    if (face == 0) {
        return vec3(1, xy);
    }
    if (face == 1) {
        return vec3(-1, xy);
    }
    if (face == 2) {
        return vec3(xy.x, 1, xy.y);
    }
    if (face == 3) {
        return vec3(xy.x, -1, xy.y);
    }
    if (face == 4) {
        return vec3(xy, 1);
    }
    if (face == 5) {
        return vec3(xy, -1);
    }
}

void main() 
{
    vec3 val[9];
    uint coefCount = (shConsts.sizeAndLevel.z + 1) * (shConsts.sizeAndLevel.z + 1);
    for (int i = 0; i < coefCount; ++i) {
        val[i] = vec3(0.0);
    }
    for (int i = 0; i < shConsts.sizeAndLevel.x; ++i) {
        for (int j = 0; j < shConsts.sizeAndLevel.y; ++j) {
	        vec3 dir = normalize(GetDirVec(uvec2(i, j), gl_LocalInvocationID.z));
            vec3 rgb = imageLoad(skyCube, ivec3(i, j, gl_LocalInvocationID.z)).rgb;

    SH9 sh = ProjectOntoSH9(dir, shConsts.sizeAndLevel.z);
        for (int d = 0; d < coefCount; ++d) {
            vec3 coefValue = rgb * sh.coefs[d];
            val[d] += coefValue;
        }

        }
    }
    for (int i = 0; i < coefCount; ++i) {
        val[i] *=  4 * 3.1415926 / 6;
    }

    for (int i = 0; i < coefCount; ++i) {
	    atomicAdd(values[i].x, uint(val[i].x));
	    atomicAdd(values[i].y, uint(val[i].y));
	    atomicAdd(values[i].z, uint(val[i].z));
	    // atomicAdd(values[i].y, coefValue.y);
	    // atomicAdd(values[i].z, coefValue.z);
    }
}